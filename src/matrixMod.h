#include <stdint.h>
#include <ESP32-HUB75-MatrixPanel-I2S-DMA.h>
MatrixPanel_I2S_DMA *dma_display = nullptr;
uint16_t myBLACK, myWHITE, myRED, myGREEN, myBLUE;

void remap(int y, int x, int *matrix_Y, int *matrix_X)
{
  int _kal = 0;
  int _kal2 = 0;
  // y += _kal;
  *matrix_Y -= _kal2;
  *matrix_X -= _kal2;
  // y += _kal;
  // matrix_Y += _kal;
  // if (y <= 7 + _kal)
  // {
  //   // *matrix_Y = y + 8;
  //   *matrix_X += 64 + _kal;
  //   return;
  // }
  // else if (y <= 15 + _kal)
  // {
  //   *matrix_Y += -8 + _kal;
  //   return;
  // }
  // else if (y <= 23 + _kal)
  // {
  //   *matrix_Y += -8 + _kal;
  //   *matrix_X += +64 + _kal;
  //   return;
  // }
  // else if (y <= 31 + _kal)
  // {
  //   *matrix_Y += -16 + _kal;
  //   return;
  // }
  // return;

  if (x < 64)
  {

    if (y <= 7)
    {
      // *matrix_X = y + 8;
      *matrix_Y = x + 64;
    }
    else if (y <= 15)
    {
      *matrix_X = y - 8;
    }
    else if (y <= 23)
    {
      *matrix_X = y - 8;
      *matrix_Y = x + 384;
    }
    else if (y <= 31)
    {
      *matrix_X = y - 16;
    }
  }

  else if (x < 128)
  {
    if (y <= 7)
    {
      // *matrix_X = y + 8;
      *matrix_Y = x + 128;
    }
    else if (y <= 15)
    {
      *matrix_X = y - 8;
    }
    else if (y <= 23)
    {
      *matrix_X = y - 8;
      *matrix_Y = x + 512;
    }
    else if (y <= 31)
    {
      *matrix_X = y - 16;
    }
  }
  else if (x < 192)
  {
    if (y <= 7)
    {
      // *matrix_X = y + 8;
      *matrix_Y = x + 256;
    }
    else if (y <= 15)
    {
      *matrix_X = y - 8;
    }
    else if (y <= 23)
    {
      *matrix_X = y - 8;
      *matrix_Y = x + 512;
    }
    else if (y <= 31)
    {
      *matrix_X = y - 16;
    }
  }
}
const uint8_t font[36][5] = {
    {0x7E, 0x11, 0x11, 0x11, 0x7E}, // A
    {0x7F, 0x49, 0x49, 0x49, 0x36}, // B
    {0x3E, 0x41, 0x41, 0x41, 0x22}, // C
    {0x7F, 0x41, 0x41, 0x41, 0x3E}, // D
    {0x7F, 0x49, 0x49, 0x49, 0x41}, // E
    {0x7F, 0x09, 0x09, 0x09, 0x01}, // F
    {0x3E, 0x41, 0x49, 0x49, 0x7A}, // G
    {0x7F, 0x08, 0x08, 0x08, 0x7F}, // H
    {0x41, 0x41, 0x7F, 0x41, 0x41}, // I
    {0x20, 0x40, 0x41, 0x3F, 0x01}, // J
    {0x7F, 0x08, 0x14, 0x22, 0x41}, // K
    {0x7F, 0x40, 0x40, 0x40, 0x40}, // L
    {0x7F, 0x02, 0x0C, 0x02, 0x7F}, // M
    {0x7F, 0x04, 0x08, 0x10, 0x7F}, // N
    {0x3E, 0x41, 0x41, 0x41, 0x3E}, // O
    {0x7F, 0x09, 0x09, 0x09, 0x06}, // P
    {0x3E, 0x41, 0x51, 0x21, 0x5E}, // Q
    {0x7F, 0x09, 0x19, 0x29, 0x46}, // R
    {0x46, 0x49, 0x49, 0x49, 0x31}, // S
    {0x01, 0x01, 0x7F, 0x01, 0x01}, // T
    {0x3F, 0x40, 0x40, 0x40, 0x3F}, // U
    {0x1F, 0x20, 0x40, 0x20, 0x1F}, // V
    {0x3F, 0x40, 0x38, 0x40, 0x3F}, // W
    {0x63, 0x14, 0x08, 0x14, 0x63}, // X
    {0x07, 0x08, 0x70, 0x08, 0x07}, // Y
    {0x61, 0x51, 0x49, 0x45, 0x43}, // Z
    {0x3E, 0x51, 0x49, 0x45, 0x3E}, // 0
    {0x00, 0x42, 0x7F, 0x40, 0x00}, // 1
    {0x62, 0x51, 0x49, 0x49, 0x46}, // 2
    {0x22, 0x41, 0x49, 0x49, 0x36}, // 3
    {0x18, 0x14, 0x12, 0x7F, 0x10}, // 4
    {0x27, 0x45, 0x45, 0x45, 0x39}, // 5
    {0x3C, 0x4A, 0x49, 0x49, 0x30}, // 6
    {0x01, 0x01, 0x7F, 0x01, 0x01}, // 7
    {0x36, 0x49, 0x49, 0x49, 0x36}, // 8
    {0x06, 0x49, 0x49, 0x29, 0x1E}  // 9
};
const uint8_t smallFont[36][3] = {
    {0x1F, 0x05, 0x1F}, // A
    {0x1F, 0x15, 0x0A}, // B
    {0x0E, 0x11, 0x11}, // C
    {0x1F, 0x11, 0x0E}, // D
    {0x1F, 0x15, 0x15}, // E
    {0x1F, 0x05, 0x05}, // F
    {0x0E, 0x11, 0x1D}, // G
    {0x1F, 0x04, 0x1F}, // H
    {0x11, 0x1F, 0x11}, // I
    {0x08, 0x10, 0x0F}, // J
    {0x1F, 0x04, 0x1B}, // K
    {0x1F, 0x10, 0x10}, // L
    {0x1F, 0x06, 0x1F}, // M
    {0x1F, 0x0E, 0x1F}, // N
    {0x0E, 0x11, 0x0E}, // O
    {0x1F, 0x05, 0x02}, // P
    {0x0E, 0x11, 0x1E}, // Q
    {0x1F, 0x05, 0x1A}, // R
    {0x12, 0x15, 0x09}, // S
    {0x01, 0x1F, 0x01}, // T
    {0x0F, 0x10, 0x0F}, // U
    {0x07, 0x18, 0x07}, // V
    {0x1F, 0x0C, 0x1F}, // W
    {0x1B, 0x04, 0x1B}, // X
    {0x03, 0x1C, 0x03}, // Y
    {0x19, 0x15, 0x13}, // Z
    {0x0E, 0x11, 0x0E}, // 0
    {0x00, 0x1F, 0x00}, // 1
    {0x19, 0x15, 0x12}, // 2
    {0x11, 0x15, 0x0A}, // 3
    {0x07, 0x04, 0x1F}, // 4
    {0x17, 0x15, 0x09}, // 5
    {0x1E, 0x15, 0x1D}, // 6
    {0x01, 0x01, 0x1F}, // 7
    {0x1F, 0x15, 0x1F}, // 8
    {0x17, 0x15, 0x0F}  // 9
};
const uint8_t font4x6[36][4] = {
    {0x1E, 0x9, 0x9, 0x1E},   // A
    {0x1F, 0x15, 0x15, 0x0A}, // B
    {0x0E, 0x11, 0x11, 0x11}, // C
    {0x1F, 0x11, 0x11, 0x0E}, // D
    {0x1F, 0x15, 0x15, 0x15}, // E
    {0x1F, 0x05, 0x05, 0x05}, // F
    {0x0E, 0x11, 0x15, 0x0D}, // G
    {0x1F, 0x04, 0x04, 0x1F}, // H
    {0x11, 0x1F, 0x11, 0x00}, // I
    {0x08, 0x10, 0x10, 0x0F}, // J
    {0x1F, 0x04, 0x0A, 0x11}, // K
    {0x1F, 0x10, 0x10, 0x10}, // L
    {0x1F, 0x02, 0x04, 0x02}, // M
    {0x1F, 0x02, 0x04, 0x1F}, // N
    {0x0E, 0x11, 0x11, 0x0E}, // O
    {0x1F, 0x05, 0x05, 0x02}, // P
    {0x0E, 0x11, 0x19, 0x16}, // Q
    {0x1F, 0x05, 0x05, 0x1A}, // R
    {0x12, 0x15, 0x15, 0x09}, // S
    {0x01, 0x1F, 0x01, 0x01}, // T
    {0x0F, 0x10, 0x10, 0x0F}, // U
    {0x07, 0x18, 0x18, 0x07}, // V
    {0x1F, 0x08, 0x08, 0x1F}, // W
    {0x1B, 0x04, 0x04, 0x1B}, // X
    {0x03, 0x1C, 0x1C, 0x03}, // Y
    {0x19, 0x15, 0x15, 0x13}, // Z
    {0x0E, 0x11, 0x11, 0x0E}, // 0
    {0x00, 0x12, 0x1F, 0x10}, // 1
    {0x19, 0x15, 0x15, 0x12}, // 2
    {0x11, 0x15, 0x15, 0x0A}, // 3
    {0x07, 0x04, 0x1F, 0x04}, // 4
    {0x17, 0x15, 0x15, 0x09}, // 5
    {0x0E, 0x15, 0x15, 0x09}, // 6
    {0x01, 0x01, 0x1F, 0x01}, // 7
    {0x0A, 0x15, 0x15, 0x0A}, // 8
    {0x12, 0x15, 0x15, 0x0E}  // 9
};
const uint8_t font5x5[36][5] = {
    {0x1E, 0x05, 0x05, 0x05, 0x1E}, // A
    {0x1F, 0x15, 0x15, 0x15, 0x0A}, // B
    {0x0E, 0x11, 0x11, 0x11, 0x00}, // C
    {0x1F, 0x11, 0x11, 0x11, 0x0E}, // D
    {0x1F, 0x15, 0x15, 0x15, 0x11}, // E
    {0x1F, 0x05, 0x05, 0x05, 0x01}, // F
    {0x0E, 0x11, 0x15, 0x15, 0x1C}, // G
    {0x1F, 0x04, 0x04, 0x04, 0x1F}, // H
    {0x11, 0x1F, 0x11, 0x11, 0x00}, // I
    {0x10, 0x10, 0x11, 0x11, 0x0F}, // J
    {0x1F, 0x04, 0x0A, 0x11, 0x00}, // K
    {0x1F, 0x10, 0x10, 0x10, 0x10}, // L
    {0x1F, 0x02, 0x04, 0x02, 0x1F}, // M
    {0x1F, 0x02, 0x04, 0x08, 0x1F}, // N
    {0x0E, 0x11, 0x11, 0x11, 0x0E}, // O
    {0x1F, 0x05, 0x05, 0x05, 0x02}, // P
    {0x0E, 0x11, 0x11, 0x19, 0x1E}, // Q
    {0x1F, 0x05, 0x05, 0x0D, 0x12}, // R
    {0x12, 0x15, 0x15, 0x15, 0x09}, // S
    {0x01, 0x01, 0x1F, 0x01, 0x01}, // T
    {0x0F, 0x10, 0x10, 0x10, 0x0F}, // U
    {0x07, 0x08, 0x10, 0x08, 0x07}, // V
    {0x1F, 0x08, 0x04, 0x08, 0x1F}, // W
    {0x11, 0x0A, 0x04, 0x0A, 0x11}, // X
    {0x01, 0x02, 0x1C, 0x02, 0x01}, // Y
    {0x11, 0x19, 0x15, 0x13, 0x11}, // Z
    {0x0E, 0x11, 0x11, 0x11, 0x0E}, // 0
    {0x00, 0x12, 0x1F, 0x10, 0x00}, // 1
    {0x19, 0x15, 0x15, 0x15, 0x12}, // 2
    {0x11, 0x15, 0x15, 0x15, 0x0A}, // 3
    {0x07, 0x04, 0x1F, 0x04, 0x04}, // 4
    {0x17, 0x15, 0x15, 0x15, 0x09}, // 5
    {0x1E, 0x15, 0x15, 0x15, 0x08}, // 6
    {0x01, 0x01, 0x1D, 0x03, 0x01}, // 7
    {0x0A, 0x15, 0x15, 0x15, 0x0A}, // 8
    {0x02, 0x15, 0x15, 0x15, 0x0E}  // 9
};
const uint8_t font7x8[36][7] = {
    {0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00, 0x00}, // A
    {0x7F, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00}, // B
    {0x3E, 0x41, 0x41, 0x41, 0x22, 0x00, 0x00}, // C
    {0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00}, // D
    {0x7F, 0x49, 0x49, 0x49, 0x41, 0x00, 0x00}, // E
    {0x7F, 0x09, 0x09, 0x09, 0x01, 0x00, 0x00}, // F
    {0x3E, 0x41, 0x49, 0x49, 0x7A, 0x00, 0x00}, // G
    {0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00, 0x00}, // H
    {0x41, 0x41, 0x7F, 0x41, 0x41, 0x00, 0x00}, // I
    {0x20, 0x40, 0x41, 0x3F, 0x01, 0x00, 0x00}, // J
    {0x7F, 0x08, 0x14, 0x22, 0x41, 0x00, 0x00}, // K
    {0x7F, 0x40, 0x40, 0x40, 0x00, 0x00, 0x00}, // L
    {0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00, 0x00}, // M
    {0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00, 0x00}, // N
    {0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00, 0x00}, // O
    {0x7F, 0x09, 0x09, 0x09, 0x06, 0x00, 0x00}, // P
    {0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00, 0x00}, // Q
    {0x7F, 0x09, 0x19, 0x29, 0x46, 0x00, 0x00}, // R
    {0x46, 0x49, 0x49, 0x49, 0x31, 0x00, 0x00}, // S
    {0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00}, // T
    {0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00, 0x00}, // U
    {0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00, 0x00}, // V
    {0x7F, 0x20, 0x10, 0x08, 0x10, 0x20, 0x7F}, // W
    {0x63, 0x14, 0x08, 0x14, 0x63, 0x00, 0x00}, // X
    {0x07, 0x08, 0x70, 0x08, 0x07, 0x00, 0x00}, // Y
    {0x61, 0x51, 0x49, 0x45, 0x43, 0x00, 0x00}, // Z
    {0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00, 0x00}, // 0
    {0x00, 0x42, 0x7F, 0x40, 0x00, 0x00, 0x00}, // 1
    {0x62, 0x51, 0x49, 0x49, 0x46, 0x00, 0x00}, // 2
    {0x22, 0x41, 0x49, 0x49, 0x36, 0x00, 0x00}, // 3
    {0x18, 0x14, 0x12, 0x7F, 0x10, 0x00, 0x00}, // 4
    {0x27, 0x45, 0x45, 0x45, 0x39, 0x00, 0x00}, // 5
    {0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00, 0x00}, // 6
    {0x01, 0x01, 0x7F, 0x01, 0x01, 0x00, 0x00}, // 7
    {0x36, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00}, // 8
    {0x06, 0x49, 0x49, 0x29, 0x1E, 0x00, 0x00}  // 9
};
const uint16_t font9x8[36][9] = {
    {0x03FE, 0x0411, 0x0411, 0x0411, 0x0411, 0x0411, 0x03FE, 0x0000, 0x0000}, // A
    {0x07FF, 0x0489, 0x0489, 0x0489, 0x0489, 0x0489, 0x0376, 0x0000, 0x0000}, // B
    {0x03FE, 0x0401, 0x0401, 0x0401, 0x0401, 0x0401, 0x0202, 0x0000, 0x0000}, // C
    {0x07FF, 0x0401, 0x0401, 0x0401, 0x0401, 0x0401, 0x03FE, 0x0000, 0x0000}, // D
    {0x07FF, 0x0489, 0x0489, 0x0489, 0x0489, 0x0489, 0x0401, 0x0000, 0x0000}, // E
    {0x07FF, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0001, 0x0000, 0x0000}, // F
    {0x03FE, 0x0401, 0x0401, 0x0401, 0x0481, 0x0481, 0x0782, 0x0000, 0x0000}, // G
    {0x07FF, 0x0080, 0x0080, 0x0080, 0x0080, 0x0080, 0x07FF, 0x0000, 0x0000}, // H
    {0x0401, 0x0401, 0x07FF, 0x0401, 0x0401, 0x0000, 0x0000, 0x0000, 0x0000}, // I
    {0x0200, 0x0400, 0x0400, 0x0400, 0x0400, 0x0400, 0x03FF, 0x0000, 0x0000}, // J
    {0x07FF, 0x0080, 0x0140, 0x0220, 0x0410, 0x0000, 0x0000, 0x0000, 0x0000}, // K
    {0x07FF, 0x0400, 0x0400, 0x0400, 0x0400, 0x0400, 0x0000, 0x0000, 0x0000}, // L
    {0x07FF, 0x0006, 0x0038, 0x00C0, 0x0038, 0x0006, 0x07FF, 0x0000, 0x0000}, // M
    {0x07FF, 0x0006, 0x0018, 0x0060, 0x0180, 0x07FF, 0x0000, 0x0000, 0x0000}, // N
    {0x03FE, 0x0401, 0x0401, 0x0401, 0x0401, 0x0401, 0x03FE, 0x0000, 0x0000}, // O
    {0x07FF, 0x0089, 0x0089, 0x0089, 0x0089, 0x0089, 0x0076, 0x0000, 0x0000}, // P
    {0x03FE, 0x0401, 0x0401, 0x0501, 0x0601, 0x0401, 0x07FE, 0x0000, 0x0000}, // Q
    {0x07FF, 0x0089, 0x0089, 0x0089, 0x0189, 0x0289, 0x0476, 0x0000, 0x0000}, // R
    {0x0206, 0x0489, 0x0489, 0x0489, 0x0489, 0x0489, 0x0372, 0x0000, 0x0000}, // S
    {0x0001, 0x0001, 0x07FF, 0x0001, 0x0001, 0x0000, 0x0000, 0x0000, 0x0000}, // T
    {0x03FF, 0x0400, 0x0400, 0x0400, 0x0400, 0x0400, 0x03FF, 0x0000, 0x0000}, // U
    {0x01FF, 0x0200, 0x0400, 0x0400, 0x0400, 0x0200, 0x01FF, 0x0000, 0x0000}, // V
    {0x07FF, 0x0200, 0x0180, 0x0200, 0x07FF, 0x0000, 0x0000, 0x0000, 0x0000}, // W
    {0x061C, 0x0122, 0x00C0, 0x00C0, 0x0122, 0x061C, 0x0000, 0x0000, 0x0000}, // X
    {0x001F, 0x0020, 0x07C0, 0x0020, 0x001F, 0x0000, 0x0000, 0x0000, 0x0000}, // Y
    {0x0611, 0x0511, 0x0491, 0x0451, 0x0431, 0x0000, 0x0000, 0x0000, 0x0000}, // Z
    {0x03FE, 0x0441, 0x0481, 0x0481, 0x0501, 0x03FE, 0x0000, 0x0000, 0x0000}, // 0
    {0x0402, 0x0401, 0x07FF, 0x0400, 0x0400, 0x0000, 0x0000, 0x0000, 0x0000}, // 1
    {0x0603, 0x0511, 0x0491, 0x0451, 0x043E, 0x0000, 0x0000, 0x0000, 0x0000}, // 2
    {0x0202, 0x0401, 0x0449, 0x0449, 0x03B6, 0x0000, 0x0000, 0x0000, 0x0000}, // 3
    {0x0300, 0x0280, 0x0240, 0x07FF, 0x0200, 0x0000, 0x0000, 0x0000, 0x0000}, // 4
    {0x020F, 0x0445, 0x0445, 0x0445, 0x0439, 0x0000, 0x0000, 0x0000, 0x0000}, // 5
    {0x03FC, 0x044A, 0x0449, 0x0449, 0x0430, 0x0000, 0x0000, 0x0000, 0x0000}, // 6
    {0x0001, 0x0001, 0x07F1, 0x0011, 0x000F, 0x0000, 0x0000, 0x0000, 0x0000}, // 7
    {0x03F6, 0x0449, 0x0449, 0x0449, 0x03F6, 0x0000, 0x0000, 0x0000, 0x0000}, // 8
    {0x007E, 0x0489, 0x0489, 0x0489, 0x03F2, 0x0000, 0x0000, 0x0000, 0x0000}  // 9
};
// const uint8_t font5x6[36][5] = {
//     {0x1E, 0x05, 0x05, 0x05, 0x1E}, // A
//     {0x1F, 0x15, 0x15, 0x15, 0x0A}, // B
//     {0x1E, 0x11, 0x11, 0x11, 0x0A}, // C
//     {0x1F, 0x11, 0x11, 0x11, 0x0E}, // D
//     {0x1F, 0x15, 0x15, 0x15, 0x11}, // E
//     {0x1F, 0x05, 0x05, 0x05, 0x01}, // F
//     {0x1E, 0x11, 0x15, 0x15, 0x1D}, // G
//     {0x1F, 0x04, 0x04, 0x04, 0x1F}, // H
//     {0x11, 0x11, 0x1F, 0x11, 0x11}, // I
//     {0x08, 0x10, 0x10, 0x10, 0x0F}, // J
//     {0x1F, 0x04, 0x0A, 0x11, 0x00}, // K
//     {0x1F, 0x10, 0x10, 0x10, 0x10}, // L
//     {0x1F, 0x02, 0x04, 0x02, 0x1F}, // M
//     {0x1F, 0x02, 0x04, 0x08, 0x1F}, // N
//     {0x1E, 0x11, 0x11, 0x11, 0x1E}, // O
//     {0x1F, 0x05, 0x05, 0x05, 0x02}, // P
//     {0x1E, 0x11, 0x19, 0x11, 0x1E}, // Q
//     {0x1F, 0x05, 0x0D, 0x15, 0x02}, // R
//     {0x12, 0x15, 0x15, 0x15, 0x09}, // S
//     {0x01, 0x01, 0x1F, 0x01, 0x01}, // T
//     {0x0F, 0x10, 0x10, 0x10, 0x0F}, // U
//     {0x07, 0x08, 0x10, 0x08, 0x07}, // V
//     {0x1F, 0x08, 0x04, 0x08, 0x1F}, // W
//     {0x11, 0x0A, 0x04, 0x0A, 0x11}, // X
//     {0x01, 0x02, 0x1C, 0x02, 0x01}, // Y
//     {0x11, 0x19, 0x15, 0x13, 0x11}, // Z
//     {0x1E, 0x11, 0x11, 0x11, 0x1E}, // 0
//     {0x00, 0x10, 0x1F, 0x00, 0x00}, // 1
//     {0x19, 0x15, 0x15, 0x15, 0x12}, // 2
//     {0x11, 0x15, 0x15, 0x15, 0x0A}, // 3
//     {0x07, 0x04, 0x04, 0x1F, 0x04}, // 4
//     {0x17, 0x15, 0x15, 0x15, 0x09}, // 5
//     {0x1E, 0x15, 0x15, 0x15, 0x09}, // 6
//     {0x01, 0x01, 0x01, 0x01, 0x1F}, // 7
//     {0x1A, 0x15, 0x15, 0x15, 0x1A}, // 8
//     {0x12, 0x15, 0x15, 0x15, 0x1E}  // 9
// };
const uint8_t font5x6[36][5] = {
    {0x1E, 0x11, 0x1F, 0x11, 0x11}, // A
    {0x1F, 0x15, 0x1F, 0x15, 0x1F}, // B
    {0x1E, 0x11, 0x10, 0x11, 0x1E}, // C
    {0x1F, 0x11, 0x11, 0x11, 0x1F}, // D
    {0x1F, 0x14, 0x1C, 0x14, 0x1F}, // E
    {0x1F, 0x14, 0x1C, 0x14, 0x10}, // F
    {0x1E, 0x11, 0x13, 0x11, 0x1E}, // G
    {0x11, 0x11, 0x1F, 0x11, 0x11}, // H
    {0x1F, 0x04, 0x04, 0x04, 0x1F}, // I
    {0x07, 0x02, 0x02, 0x12, 0x1E}, // J
    {0x11, 0x12, 0x1C, 0x12, 0x11}, // K
    {0x10, 0x10, 0x10, 0x10, 0x1F}, // L
    {0x11, 0x1B, 0x15, 0x11, 0x11}, // M
    {0x11, 0x19, 0x15, 0x13, 0x11}, // N
    {0x1E, 0x11, 0x11, 0x11, 0x1E}, // O
    {0x1F, 0x11, 0x1F, 0x10, 0x10}, // P
    {0x1E, 0x11, 0x15, 0x12, 0x1D}, // Q
    {0x1F, 0x11, 0x1F, 0x12, 0x11}, // R
    {0x1E, 0x10, 0x1E, 0x01, 0x1E}, // S
    {0x1F, 0x04, 0x04, 0x04, 0x04}, // T
    {0x11, 0x11, 0x11, 0x11, 0x1F}, // U
    {0x11, 0x11, 0x11, 0x0A, 0x04}, // V
    {0x11, 0x11, 0x15, 0x1B, 0x11}, // W
    {0x11, 0x0A, 0x04, 0x0A, 0x11}, // X
    {0x11, 0x11, 0x1F, 0x04, 0x04}, // Y
    {0x1F, 0x02, 0x04, 0x08, 0x1F}, // Z
    {0x1E, 0x15, 0x15, 0x15, 0x1E}, // 0
    {0x04, 0x0C, 0x04, 0x04, 0x1F}, // 1
    {0x1F, 0x02, 0x1E, 0x10, 0x1F}, // 2
    {0x1F, 0x02, 0x1E, 0x02, 0x1F}, // 3
    {0x11, 0x11, 0x1F, 0x02, 0x02}, // 4
    {0x1F, 0x10, 0x1E, 0x02, 0x1E}, // 5
    {0x1E, 0x10, 0x1E, 0x11, 0x1E}, // 6
    {0x1F, 0x02, 0x04, 0x08, 0x10}, // 7
    {0x1E, 0x11, 0x1E, 0x11, 0x1E}, // 8
    {0x1E, 0x11, 0x1E, 0x02, 0x1E}  // 9
};
const uint8_t font5x7[36][5] = {
    {0x7C, 0x12, 0x11, 0x12, 0x7C}, // A
    {0x7F, 0x49, 0x49, 0x49, 0x36}, // B
    {0x3E, 0x41, 0x41, 0x41, 0x22}, // C
    {0x7F, 0x41, 0x41, 0x22, 0x1C}, // D
    {0x7F, 0x49, 0x49, 0x49, 0x41}, // E
    {0x7F, 0x09, 0x09, 0x09, 0x01}, // F
    {0x3E, 0x41, 0x49, 0x49, 0x7A}, // G
    {0x7F, 0x08, 0x08, 0x08, 0x7F}, // H
    {0x41, 0x7F, 0x41, 0x00, 0x00}, // I
    {0x20, 0x40, 0x41, 0x3F, 0x01}, // J
    {0x7F, 0x08, 0x14, 0x22, 0x41}, // K
    {0x7F, 0x40, 0x40, 0x40, 0x40}, // L
    {0x7F, 0x02, 0x04, 0x02, 0x7F}, // M
    {0x7F, 0x02, 0x04, 0x08, 0x7F}, // N
    {0x3E, 0x41, 0x41, 0x41, 0x3E}, // O
    {0x7F, 0x09, 0x09, 0x09, 0x06}, // P
    {0x3E, 0x41, 0x51, 0x21, 0x5E}, // Q
    {0x7F, 0x09, 0x19, 0x29, 0x46}, // R
    {0x46, 0x49, 0x49, 0x49, 0x31}, // S
    {0x01, 0x01, 0x7F, 0x01, 0x01}, // T
    {0x3F, 0x40, 0x40, 0x40, 0x3F}, // U
    {0x1F, 0x20, 0x40, 0x20, 0x1F}, // V
    {0x7F, 0x20, 0x18, 0x20, 0x7F}, // W
    {0x63, 0x14, 0x08, 0x14, 0x63}, // X
    {0x03, 0x04, 0x78, 0x04, 0x03}, // Y
    {0x61, 0x51, 0x49, 0x45, 0x43}, // Z
    {0x3E, 0x41, 0x41, 0x41, 0x3E}, // 0
    {0x44, 0x42, 0x7F, 0x40, 0x40}, // 1
    {0x62, 0x51, 0x51, 0x49, 0x46}, // 2
    {0x41, 0x41, 0x49, 0x49, 0x36}, // 3
    {0x0F, 0x08, 0x08, 0x08, 0x7F}, // 4
    {0x4F, 0x49, 0x49, 0x49, 0x31}, // 5
    {0x3E, 0x49, 0x49, 0x49, 0x30}, // 6
    {0x01, 0x01, 0x71, 0x09, 0x07}, // 7
    {0x36, 0x49, 0x49, 0x49, 0x36}, // 8
    {0x06, 0x49, 0x49, 0x49, 0x3E}  // 9
};

int font_11x13[][13] = {
  {0b0011110000, // A
   0b0111111000,
   0b0110011000,
   0b1100001100,
   0b1100001100,
   0b1111111100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b0000000000,
   0b0000000000},

  {0b1111111000, // B
   0b0110001100,
   0b0110000110,
   0b0110000110,
   0b0110001100,
   0b0111111000,
   0b0110001100,
   0b0110000110,
   0b0110000110,
   0b0110001100,
   0b1111111000,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // C
   0b0110000110,
   0b1100000011,
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1100000011,
   0b0110000110,
   0b0011111100,
   0b0000000000,
   0b0000000000},

  {0b1111111000, // D
   0b0110001100,
   0b0110000110,
   0b0110000011,
   0b0110000011,
   0b0110000011,
   0b0110000011,
   0b0110000011,
   0b0110000110,
   0b0110001100,
   0b1111111000,
   0b0000000000,
   0b0000000000},

  {0b1111111100, // E
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0111111100,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b1111111100,
   0b0000000000,
   0b0000000000},

  {0b1111111100, // F
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0111111100,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // G
   0b0110000110,
   0b1100000011,
   0b1100000000,
   0b1100000000,
   0b1100011111,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b0110000110,
   0b0011111100,
   0b0000000000,
   0b0000000000},

  {0b0110000110, // H
   0b0110000110,
   0b0110000110,
   0b0110000110,
   0b0110000110,
   0b0111111110,
   0b0110000110,
   0b0110000110,
   0b0110000110,
   0b0110000110,
   0b0110000110,
   0b0000000000,
   0b0000000000},

  {0b1111111100, // I
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b1111111100,
   0b0000000000,
   0b0000000000},

  {0b0000011110, // J
   0b0000001100,
   0b0000001100,
   0b0000001100,
   0b0000001100,
   0b0000001100,
   0b0000001100,
   0b0000001100,
   0b0110001100,
   0b0110001100,
   0b0011111000,
   0b0000000000,
   0b0000000000},

  {0b1100001100, // K
   0b1100011000,
   0b1100110000,
   0b1101100000,
   0b1111000000,
   0b1110000000,
   0b1111000000,
   0b1101100000,
   0b1100110000,
   0b1100011000,
   0b1100001100,
   0b0000000000,
   0b0000000000},

  {0b1100000000, // L
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1111111000,
   0b0000000000,
   0b0000000000},

  {0b1100000011, // M
   0b1110000111,
   0b1111001111,
   0b1101011011,
   0b1100110011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b0000000000,
   0b0000000000},

  {0b1100000110, // N
   0b1100000110,
   0b1110000110,
   0b1111000110,
   0b1101100110,
   0b1100110110,
   0b1100011110,
   0b1100001110,
   0b1100000110,
   0b1100000110,
   0b1100000110,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // O
   0b0110000110,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b0110000110,
   0b0011111100,
   0b0000000000,
   0b0000000000},

  {0b1111111000, // P
   0b0110001100,
   0b0110000110,
   0b0110000110,
   0b0110001100,
   0b0111111000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // Q
   0b0110000110,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100100011,
   0b1100011011,
   0b0110000110,
   0b0011111111,
   0b0000000000,
   0b0000000000},

  {0b1111111000, // R
   0b0110001100,
   0b0110000110,
   0b0110000110,
   0b0110001100,
   0b0111111000,
   0b0110110000,
   0b0110011000,
   0b0110001100,
   0b0110000110,
   0b0110000110,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // S
   0b0110000110,
   0b1100000000,
   0b1100000000,
   0b0110000000,
   0b0011111100,
   0b0000000110,
   0b0000000011,
   0b0000000011,
   0b0110000110,
   0b0011111100,
   0b0000000000,
   0b0000000000},

  {0b1111111111, // T
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000000000,
   0b0000000000},

  {0b1100001100, // U
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b0111111000,
   0b0000000000,
   0b0000000000},

  {0b1100001100, // V
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b1100001100,
   0b0110011000,
   0b0111111000,
   0b0011110000,
   0b0000000000,
   0b0000000000},

  // {0b11000000110, // W
  //  0b11000000110,
  //  0b11000000110,
  //  0b11000000110,
  //  0b11000000110,
  //  0b11000000110,
  //  0b11011010110,
  //  0b11011010110,
  //  0b11111111110,
  //  0b01100110100,
  //  0b01100110100,
  //  0b00000000000,
  //  0b00000000000},

  {
      0b1100000011, // W
      0b1100000011,
      0b1100000011,
      0b1100000011,
      0b1100000011,
      0b1100000011,
      0b1100000011,
      0b1100110011,
      0b1101011011,
      0b1111001111,
      0b1110000111,
      0b0000000000,
      0b0000000000},

  {0b1100001100, // X
   0b1100001100,
   0b0110011000,
   0b0110011000,
   0b0011110000,
   0b0001100000,
   0b0011110000,
   0b0110011000,
   0b0110011000,
   0b1100001100,
   0b1100001100,
   0b0000000000,
   0b0000000000},

  {0b1100001100, // Y
   0b1100001100,
   0b1100001100,
   0b0110011000,
   0b0110011000,
   0b0011110000,
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b0001100000,
   0b0000000000,
   0b0000000000},

  {0b0111111110, // Z
   0b0000000110,
   0b0000000110,
   0b0000001100,
   0b0000011000,
   0b0000110000,
   0b0001100000,
   0b0011000000,
   0b0110000000,
   0b1100000000,
   0b1111111110,
   0b0000000000,
   0b0000000000},
  // Karakter lainnya bisa ditambahkan di sini...

  {0b0001111000, // 0
   0b0011001100,
   0b0110000110,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b0110000110,
   0b0011001100,
   0b0001111000,
   0b0000000000,
   0b0000000000},

  {0b0000110000, // 1
   0b0001110000,
   0b0011110000,
   0b0100110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b0000110000,
   0b1111111111,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // 2
   0b0110000110,
   0b1100000011,
   0b0000000011,
   0b0000000110,
   0b0000001100,
   0b0000011000,
   0b0000110000,
   0b0001100000,
   0b0011000000,
   0b0111111110,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // 3
   0b0110000110,
   0b1100000011,
   0b0000000011,
   0b0000000110,
   0b0001111100,
   0b0000000110,
   0b0000000011,
   0b0000000011,
   0b0110000110,
   0b0011111100,
   0b0000000000,
   0b0000000000},

  {0b0000001100, // 4
   0b0000011100,
   0b0000111100,
   0b0001101100,
   0b0011001100,
   0b0110001100,
   0b1100001100,
   0b1111111111,
   0b0000001100,
   0b0000001100,
   0b0000001100,
   0b0000000000,
   0b0000000000},

  {0b1111111100, // 5
   0b1100000000,
   0b1100000000,
   0b1100000000,
   0b1111111000,
   0b0000001100,
   0b0000000110,
   0b0000000110,
   0b1100000110,
   0b1100001100,
   0b0111111000,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // 6
   0b0110000110,
   0b1100000011,
   0b1100000000,
   0b1100000000,
   0b1111111100,
   0b1100000110,
   0b1100000011,
   0b1100000011,
   0b0110000110,
   0b0011111100,
   0b0000000000,
   0b0000000000},

  {0b1111111100, // 7
   0b0000001100,
   0b0000011000,
   0b0000110000,
   0b0001100000,
   0b0011000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0110000000,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // 8
   0b0110000110,
   0b1100000011,
   0b1100000011,
   0b0110000110,
   0b0011111100,
   0b0110000110,
   0b1100000011,
   0b1100000011,
   0b0110000110,
   0b0011111100,
   0b0000000000,
   0b0000000000},

  {0b0011111100, // 9
   0b0110000110,
   0b1100000011,
   0b1100000011,
   0b1100000011,
   0b0110000111,
   0b0011111111,
   0b0000000011,
   0b0000000011,
   0b1100000110,
   0b0111111100,
   0b0000000000,
   0b0000000000}};

int font10x14[64][14]{

    // {0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000,
    //  0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000},

    // Huruf 'A' (ASCII 65)
    {0x0000, 0x0380, 0x07C0, 0x07C0, 0x0C60, 0x0C60, 0x1FF0, 0x1FF0,
     0x1830, 0x1830, 0x1830, 0x1830, 0x0000, 0x0000},

    // Huruf 'B' (ASCII 66)
    {0x0000, 0x1FE0, 0x1FF0, 0x0C30, 0x0C30, 0x0FF0, 0x0FF0, 0x0C30,
     0x0C30, 0x0C30, 0x1FF0, 0x1FE0, 0x0000, 0x0000},

    // Huruf 'C' (ASCII 67)
    {0x0000, 0x07F0, 0x0FF8, 0x1C18, 0x1800, 0x1800, 0x1800, 0x1800,
     0x1800, 0x1C18, 0x0FF8, 0x07F0, 0x0000, 0x0000},

    // Huruf 'D' (ASCII 68)
    {0x0000, 0x1FE0, 0x1FF0, 0x0C38, 0x0C18, 0x0C18, 0x0C18, 0x0C18,
     0x0C18, 0x0C38, 0x1FF0, 0x1FE0, 0x0000, 0x0000},

    // Huruf 'E' (ASCII 69)
    {0x0000, 0x1FF8, 0x1FF8, 0x1800, 0x1800, 0x1FC0, 0x1FC0, 0x1800,
     0x1800, 0x1800, 0x1FF8, 0x1FF8, 0x0000, 0x0000},

    // Huruf 'F' (ASCII 70)
    {0x0000, 0x1FF8, 0x1FF8, 0x1800, 0x1800, 0x1FC0, 0x1FC0, 0x1800,
     0x1800, 0x1800, 0x1800, 0x1800, 0x0000, 0x0000},

    // Huruf 'G' (ASCII 71)
    {0x0000, 0x07F0, 0x0FF8, 0x1C18, 0x1800, 0x1800, 0x1878, 0x1878,
     0x1C18, 0x1C18, 0x0FF8, 0x07F0, 0x0000, 0x0000},

    // Huruf 'H' (ASCII 72)
    {0x0000, 0x1830, 0x1830, 0x1830, 0x1830, 0x1FF0, 0x1FF0, 0x1830,
     0x1830, 0x1830, 0x1830, 0x1830, 0x0000, 0x0000},

    // Huruf 'I' (ASCII 73)
    {0x0000, 0x07E0, 0x07E0, 0x0180, 0x0180, 0x0180, 0x0180, 0x0180,
     0x0180, 0x0180, 0x07E0, 0x07E0, 0x0000, 0x0000},

    // Huruf 'J' (ASCII 74)
    {0x0000, 0x01F0, 0x01F0, 0x0060, 0x0060, 0x0060, 0x0060, 0x1860,
     0x1860, 0x1C60, 0x0FC0, 0x0780, 0x0000, 0x0000},

    // Huruf 'K' (ASCII 75)
    {0x0000, 0x1830, 0x1860, 0x18C0, 0x1980, 0x1F00, 0x1F00, 0x1980,
     0x18C0, 0x1860, 0x1830, 0x1818, 0x0000, 0x0000},

    // Huruf 'L' (ASCII 76)
    {0x0000, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800, 0x1800,
     0x1800, 0x1800, 0x1FF8, 0x1FF8, 0x0000, 0x0000},

    // Huruf 'M' (ASCII 77)
    {0x000, 0x606, 0x70E, 0x79E, 0x6D6, 0x666, 0x606, 0x606,
     0x606, 0x606, 0x606, 0x606, 0x000, 0x000},

    // Huruf 'N' (ASCII 78) - Diperbaiki
    {0x000, 0x606, 0x706, 0x786, 0x7C6, 0x6E6, 0x676, 0x63E,
     0x61E, 0x60E, 0x606, 0x606, 0x000, 0x000},

    // Huruf 'O' (ASCII 79)
    {0x000, 0x1F8, 0x3FC, 0x606, 0x606, 0x606, 0x606, 0x606,
     0x606, 0x606, 0x3FC, 0x1F8, 0x000, 0x000},

    // Huruf 'P' (ASCII 80)
    {0x000, 0x7F8, 0x7FC, 0x606, 0x606, 0x7FC, 0x7F8, 0x600,
     0x600, 0x600, 0x600, 0x600, 0x000, 0x000},

    // Huruf 'Q' (ASCII 81)
    {0x000, 0x1F8, 0x30C, 0x606, 0x606, 0x606, 0x606, 0x606,
     0x606, 0x30C, 0x1F8, 0x018, 0x00C, 0x000},

    // Huruf 'R' (ASCII 82)
    {0x000, 0x7F8, 0x7FC, 0x606, 0x606, 0x7FC, 0x7F8, 0x60C,
     0x606, 0x606, 0x606, 0x606, 0x000, 0x000},

    // Huruf 'S' (ASCII 83)
    {0x000, 0x1FC, 0x3FE, 0x606, 0x600, 0x3F8, 0x1FC, 0x00E,
     0x006, 0x606, 0x7FE, 0x3FC, 0x000, 0x000},

    // Huruf 'T' (ASCII 84)
    {0x000, 0x7FE, 0x7FE, 0x060, 0x060, 0x060, 0x060, 0x060,
     0x060, 0x060, 0x060, 0x060, 0x000, 0x000},

    // Huruf 'U' (ASCII 85)
    {0x000, 0x606, 0x606, 0x606, 0x606, 0x606, 0x606, 0x606,
     0x606, 0x606, 0x7FE, 0x3FC, 0x000, 0x000},

    // Huruf 'V' (ASCII 86)
    {0x000, 0x606, 0x606, 0x606, 0x606, 0x606, 0x606, 0x606,
     0x606, 0x606, 0x30C, 0x1F8, 0x0F0, 0x000},

    // Huruf 'W' (ASCII 87)
    {0x000, 0x606, 0x606, 0x606, 0x606, 0x606, 0x666, 0x666,
     0x666, 0x7E6, 0x3FC, 0x198, 0x000, 0x000},

    // Huruf 'X' (ASCII 88)
    {0x000, 0x606, 0x606, 0x30C, 0x30C, 0x1F8, 0x0F0, 0x0F0,
     0x1F8, 0x30C, 0x30C, 0x606, 0x606, 0x000},

    // Huruf 'Y' (ASCII 89)
    {0x000, 0x606, 0x606, 0x30C, 0x30C, 0x1F8, 0x0F0, 0x060,
     0x060, 0x060, 0x060, 0x060, 0x060, 0x000},

    // Huruf 'Z' (ASCII 90)
    {0x000, 0x7FE, 0x7FE, 0x00C, 0x018, 0x030, 0x060, 0x0C0,
     0x180, 0x300, 0x7FE, 0x7FE, 0x000, 0x000},

    // Angka '0'
    {0x000, 0x1F8, 0x30C, 0x606, 0x606, 0x606, 0x606, 0x606,
     0x606, 0x30C, 0x1F8, 0x000, 0x000, 0x000},

    // Angka '1'
    {
        0x0030, // 000000110000
        0x0070, // 000001110000
        0x00f0, // 000011110000
        0x01B0, // 000110110000
        0x0030, // 000000110000
        0x0030, // 000000110000
        0x0030, // 000000110000
        0x0030, // 000000110000
        0x0030, // 000000110000
        0x03FE, // 011111111100
        0x03FE  // 011111111100
    },

    // Angka '2'
    {0x000, 0x1F8, 0x30C, 0x006, 0x006, 0x00C, 0x018, 0x030,
     0x060, 0x0C0, 0x3FE, 0x000, 0x000, 0x000},

    // Angka '3'

    {0x000, 0x1F8, 0x30C, 0x006, 0x006, 0x03C, 0x03C, 0x006,
     0x006, 0x30C, 0x1F8, 0x000, 0x000, 0x000},

    // Angka '4'
    {0x000, 0x018, 0x038, 0x078, 0x0D8, 0x198, 0x318, 0x3FE,
     0x018, 0x018, 0x018, 0x000, 0x000, 0x000},

    // Angka '5'
    {0x000, 0x3FE, 0x300, 0x300, 0x3F8, 0x00C, 0x006, 0x006,
     0x006, 0x30C, 0x1F8, 0x000, 0x000, 0x000},

    // Angka '6'
    {0x000, 0x0F8, 0x18C, 0x300, 0x300, 0x3F8, 0x30C, 0x306,
     0x306, 0x30C, 0x1F8, 0x000, 0x000, 0x000},

    // Angka '7'
    {0x000, 0x3FE, 0x006, 0x00C, 0x018, 0x030, 0x030, 0x060,
     0x060, 0x0C0, 0x0C0, 0x000, 0x000, 0x000},

    // Angka '8'
    {0x000, 0x1F8, 0x30C, 0x606, 0x606, 0x30C, 0x1F8, 0x30C,
     0x606, 0x606, 0x30C, 0x1F8, 0x000, 0x000},

    // Angka '9'
    {0x000, 0x1F8, 0x30C, 0x30C, 0x30C, 0x30C, 0x1FC, 0x00C,
     0x00C, 0x30C, 0x1F8, 0x000, 0x000, 0x000},

};

uint16_t colorWheel(uint8_t pos)
{
  if (pos < 85)
  {
    return dma_display->color565(pos * 3, 255 - pos * 3, 0);
  }
  else if (pos < 170)
  {
    pos -= 85;
    return dma_display->color565(255 - pos * 3, 0, pos * 3);
  }
  else
  {
    pos -= 170;
    return dma_display->color565(0, pos * 3, 255 - pos * 3);
  }
}
void drawText(int colorWheelOffset)
{

  // draw text with a rotating colour
  dma_display->setTextSize(1);     // size 1 == 8 pixels high
  dma_display->setTextWrap(false); // Don't wrap at end of line - will do ourselves

  dma_display->setCursor(5, 0); // start at top left, with 8 pixel of spacing
  uint8_t w = 0;
  const char *str = "ESP32";
  for (w = 0; w < strlen(str); w++)
  {
    dma_display->setTextColor(colorWheel((w * 32) + colorWheelOffset));
    dma_display->print(str[w]);
  }

  dma_display->println();
  dma_display->println();
  dma_display->setTextColor(dma_display->color444(15, 15, 15));
  dma_display->println("LED");
  // Jump a half character
  dma_display->setCursor(34, 24);
  dma_display->setTextColor(dma_display->color444(0, 15, 15));
  dma_display->print("*");
  dma_display->setTextColor(dma_display->color444(15, 0, 0));
  dma_display->print('R');
  dma_display->setTextColor(dma_display->color444(0, 15, 0));
  dma_display->print('G');
  dma_display->setTextColor(dma_display->color444(0, 0, 15));
  dma_display->print("B");
  dma_display->setTextColor(dma_display->color444(15, 0, 8));
  dma_display->println("*");
}

// void errdrawPixel(int x, int y, uint16_t color)
// {
//     // **Hitung indeks panel berdasarkan posisi X**
//     int panelIndex = x / 64;  // 0 = kiri, 1 = tengah, 2 = kanan
//     int panelX = x % 64;      // Posisi X dalam satu panel
//     int panelY = y;           // Posisi Y dalam panel
//     // **Mapping ulang posisi berdasarkan aturan panel**
//     if (panelIndex == 0) // Panel kiri
//     {
//         if (y <= 7) panelX = x;
//         else if (y <= 15) panelY = y - 8;
//         else if (y <= 23) { panelX = x; panelY = y - 8; }
//         else panelY = y - 16;
//     }
//     else if (panelIndex == 1) // Panel tengah
//     {
//         panelX = (panelX + 64); // Geser ke tengah
//         if (y <= 7) panelX = x;
//         else if (y <= 15) panelY = y - 8;
//         else if (y <= 23) { panelX = x; panelY = y - 8; }
//         else panelY = y - 16;
//     }
//     else if (panelIndex == 2) // Panel kanan
//     {
//         panelX = (panelX + 128); // Geser ke kanan
//         if (y <= 7) panelX = x;
//         else if (y <= 15) panelY = y - 8;
//         else if (y <= 23) { panelX = x; panelY = y - 8; }
//         else panelY = y - 16;
//     }
//     // **Gambar pixel setelah mapping**
//     dma_display->drawPixel(panelX, panelY, color);
// }
//////////////////////////////////////////////////////////////
void errdrawPixel(int x, int y, uint16_t color)
{
  int panelX = x;
  int panelY = y;
  int panelIndex = 0;
  // dma_display->drawPixel(panelX, panelY, color);
  // return;

  if (x < 64)
  {
    if (y <= 7)
    {
      // panelY = y + 8;
      panelX = x + 64;
      dma_display->drawPixel(panelX, panelY, color);
    }
    else if (y <= 15)
    {
      panelY = y - 8;
      dma_display->drawPixel(panelX, panelY, color);
    }

    else if (y <= 23)
    {
      panelY = y - 8;
      panelX = x + 64;
      dma_display->drawPixel(panelX, panelY, color);
    }
    else if (y <= 31)
    {
      panelY = y - 16;
      dma_display->drawPixel(panelX, panelY, color);
    }
  }

  ///////////////////////////////////////////////////////

  else if (x < 128)
  {
    panelX += 128;
    if (y <= 7)
    {
      // panelY = y + 8;
      dma_display->drawPixel(panelX, panelY, color);
    }
    else if (y <= 15)
    {
      panelX -= 64;
      panelY = y - 8;
      dma_display->drawPixel(panelX, panelY, color);
    }
    else if (y <= 23)
    {
      panelY = y - 8;
      dma_display->drawPixel(panelX, panelY, color);
    }
    else if (y <= 31)
    {
      panelX -= 64;
      panelY = y - 16;
      dma_display->drawPixel(panelX, panelY, color);
    }
  }

  //////////////////////////////////////////////////////////
  else if (x < 192)
  {
    panelX += 192;
    if (y <= 7)
    {
      // panelY = y + 8;
      dma_display->drawPixel(panelX, panelY, color);
    }
    else if (y <= 15)
    {
      panelX -= 64;
      panelY = y - 8;
      dma_display->drawPixel(panelX, panelY, color);
    }
    else if (y <= 23)
    {
      panelY = y - 8;
      dma_display->drawPixel(panelX, panelY, color);
    }
    else if (y <= 31)
    {
      panelX -= 64;
      panelY = y - 16;
      dma_display->drawPixel(panelX, panelY, color);
    }
  }
}

// Fungsi untuk menggambar satu karakter dengan ukuran yang dapat diubah
void drawChar(char c, int x, int y, uint16_t color, int scale = 1)
{
  if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
  {
    const uint8_t *bitmap = (c >= 'A') ? font[c - 'A'] : font[c - '0' + 26];

    for (int col = 0; col < 5; col++)
    {
      for (int row = 0; row < 7; row++)
      {
        if (bitmap[col] & (1 << row))
        {
          // Gambar piksel dengan ukuran diperbesar sesuai skala
          for (int dx = 0; dx < scale; dx++)
          {
            for (int dy = 0; dy < scale; dy++)
            {
              errdrawPixel(x + col * scale + dx, y + row * scale + dy, color);
            }
          }
        }
      }
    }
  }
}
void drawChar4x6(char c, int x, int y, uint16_t color)
{
  if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
  {
    const uint8_t *bitmap = (c >= 'A') ? font4x6[c - 'A'] : font4x6[c - '0' + 26];

    for (int col = 0; col < 4; col++)
    {
      for (int row = 0; row < 6; row++)
      {
        if (bitmap[col] & (1 << row))
        {
          errdrawPixel(x + col, y + row, color);
        }
      }
    }
  }
}
void drawText4x6(String text, int x, int y, uint16_t color)
{
  for (size_t i = 0; i < text.length(); i++)
  {
    drawChar4x6(text[i], x + i * 5, y, color); // Jarak antar karakter adalah 5 piksel
  }
}
void drawSmallChar(char c, int x, int y, uint16_t color)
{
  if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
  {
    const uint8_t *bitmap = (c >= 'A') ? smallFont[c - 'A'] : smallFont[c - '0' + 26];

    for (int col = 0; col < 3; col++)
    {
      for (int row = 0; row < 5; row++)
      {
        if (bitmap[col] & (1 << row))
        {
          errdrawPixel(x + col, y + row, color);
        }
      }
    }
  }
}
void drawSmallText(String text, int x, int y, uint16_t color)
{
  for (size_t i = 0; i < text.length(); i++)
  {
    drawSmallChar(text[i], x + i * 4, y, color); // Jarak antar karakter adalah 4 piksel
  }
}
void drawChar5x6(char c, int x, int y, uint16_t color)
{
  if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
  {
    int index = (c >= 'A') ? c - 'A' : c - '0' + 26;
    for (int col = 0; col < 5; col++)
    {
      uint8_t columnData = font5x6[index][col];
      for (int row = 0; row < 6; row++)
      {
        if (columnData & (1 << row))
        {
          errdrawPixel(x + col, y + row, color);
        }
      }
    }
  }
}
void drawChar5x7(char c, int x, int y, uint16_t color)
{
  if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
  {
    const uint8_t *bitmap = (c >= 'A') ? font5x7[c - 'A'] : font5x7[c - '0' + 26];

    for (int col = 0; col < 5; col++)
    { // 5 columns
      for (int row = 0; row < 7; row++)
      { // 7 rows
        if (bitmap[col] & (1 << row))
        {                                        // Check if the bit is set
          errdrawPixel(x + col, y + row, color); // Replace `errdrawPixel` with your pixel-drawing function
        }
      }
    }
  }
}

void printCharacter(int x, int y, const int *font)
{
    // Loop untuk menggambar pixel dari font 16x16
    for (int i = 0; i < 12; i++)
    { // Baris
        for (int j = 0; j < 14; j++)
        { // Kolom
            // Cek bit yang sesuai dalam array font untuk menentukan apakah pixel hidup (1) atau mati (0)
            if ((unsigned int)font[i] & (1 << j))
            {                                 // Cast char ke unsigned char
                errdrawPixel(x + 15 - j, y + i, dma_display->color565(255, 000, 000) ); // Gambar pixel hidup
            }
            else
            {
                // setLED(x + i, y + j, 0); // Gambar pixel mati
            }
        }
    }
}

// Fungsi untuk menggambar teks dengan ukuran yang dapat diubah
void drawText(String text, int x, int y, uint16_t color, int scale = 1)
{
  for (size_t i = 0; i < text.length(); i++)
  {
    drawChar(text[i], x + i * (5 * scale + scale), y, color, scale); // Spasi antar karakter sesuai skala
  }
}
void drawChar5x5(char c, int x, int y, uint16_t color)
{
  if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
  {
    const uint8_t *bitmap = (c >= 'A') ? font5x5[c - 'A'] : font5x5[c - '0' + 26];

    for (int col = 0; col < 5; col++)
    {
      for (int row = 0; row < 5; row++)
      {
        if (bitmap[col] & (1 << row))
        {
          errdrawPixel(x + col, y + row, color);
        }
      }
    }
  }
}
void drawText5x5(String text, int x, int y, uint16_t color)
{
  for (size_t i = 0; i < text.length(); i++)
  {
    drawChar5x5(text[i], x + i * 6, y, color); // Jarak antar karakter adalah 6 piksel
  }
}
void scrollText(String text, int speed, uint16_t color)
{
  int textWidth = text.length() * 6; // Lebar total teks dalam piksel
  int panelWidth = 64;               // Lebar panel dalam piksel
  int x = panelWidth;                // Mulai dari luar sisi kanan panel

  while (x > -textWidth)
  {
    dma_display->clearScreen();

    // Gambar teks berjalan
    drawText5x5(text, x, 0, color);

    //  dma_display->show(); // Perbarui layar
    delay(speed); // Kecepatan scrolling

    x--; // Gerakkan teks ke kiri
  }
}
void drawText7x8(String text, int x, int y, uint16_t color)
{
  for (int i = 0; i < text.length(); i++)
  {
    char c = text[i];

    // Cek apakah karakter valid (A-Z atau 0-9)
    if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
    {
      int charIndex = (c >= 'A') ? c - 'A' : c - '0' + 26;

      // Gambar karakter per piksel
      for (int col = 0; col < 7; col++)
      {
        uint8_t columnData = font7x8[charIndex][col];
        for (int row = 0; row < 8; row++)
        {
          if (columnData & (1 << row))
          {
            errdrawPixel(x + col + i * 8, y + row, color);
          }
        }
      }
    }
  }
}
// void drawChar9x8(char c, int x, int y)
// {
//   if (c >= 'A' && c <= 'Z')
//   {
//     c -= 'A'; // Offset untuk huruf A-Z
//   }
//   else if (c >= '0' && c <= '9')
//   {
//     c = c - '0' + 26; // Offset untuk angka 0-9
//   }
//   else
//   {
//     return; // Abaikan karakter di luar A-Z dan 0-9
//   }
//
//   for (int row = 0; row < 8; row++)
//   {
//     uint16_t rowData = font9x8[c][row];
//     for (int col = 0; col < 9; col++)
//     {
//       if (rowData & (1 << (8 - col)))
//       {
//         drawPixel(x + col, y + row, true); // Nyalakan piksel
//       }
//       else
//       {
//         errdrawPixel(x + col, y + row, false); // Matikan piksel
//       }
//     }
//   }
// }
void drawText9x8(String text, int x, int y, uint16_t color)
{
  for (int i = 0; i < text.length(); i++)
  {
    char c = text[i];

    // Cek apakah karakter valid (A-Z atau 0-9)
    if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
    {
      int charIndex = (c >= 'A') ? c - 'A' : c - '0' + 26;

      // Gambar karakter per piksel
      for (int col = 0; col < 9; col++)
      {
        uint8_t columnData = font9x8[charIndex][col];
        for (int row = 0; row < 8; row++)
        {
          if (columnData & (1 << row))
          {
            errdrawPixel(x + col + i * 10, y + row, color); // Offset karakter setiap 10 piksel
          }
        }
      }
    }
  }
}
void drawText5x6(String text, int x, int y, uint16_t color)
{
  for (int i = 0; i < text.length(); i++)
  {
    char c = text[i];

    // Hanya mendukung karakter A-Z dan 0-9
    if ((c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9'))
    {
      const uint8_t *bitmap = (c >= 'A') ? font5x6[c - 'A'] : font5x6[c - '0' + 26];

      for (int col = 0; col < 5; col++)
      { // Lebar 5 piksel
        for (int row = 0; row < 6; row++)
        { // Tinggi 6 piksel
          if (bitmap[col] & (1 << row))
          { // Periksa bit aktif
            errdrawPixel(x + col, y + row, color);
          }
        }
      }
    }

    // Geser posisi x untuk karakter berikutnya
    x += 6; // Tambahkan 5 piksel lebar + 1 piksel jarak antar karakter
  }
}
void drawText5x7(String text, int x, int y, uint16_t color)
{
  int spacing = 1; // Space between characters
  for (int i = 0; i < text.length(); i++)
  {
    char c = text[i];
    drawChar5x7(c, x + (i * (5 + spacing)), y, color);
  }
}
// void drawline()
// {
//   // dma_display->clearScreen();
//   // for (int i = 0; i < 32; i++)
//   // {
//   //   errdrawPixel(32, i, myRED);
//   //   delay(1);
//   // }
//   for (int i = 0; i < 64; i++)
//   {
//     errdrawPixel(i, 16, myRED);
//     delay(1);
//   }
//   int geser = 20;
//   drawText7x8("W", 10, 0, dma_display->color565(255, 255, 255));
//   drawText7x8("L", 10 + geser, 0, dma_display->color565(255, 255, 255));
//   // drawText7x8("W", 43, 0, dma_display->color565(255, 255, 255));
//   // drawText7x8("L", 43 + geser, 0, dma_display->color565(255, 255, 255));
//   // drawText7x8("W", 10, 17, dma_display->color565(255, 255, 255));
//   // drawText7x8("L", 10 + geser, 17, dma_display->color565(255, 255, 255));
//   // drawText7x8("W", 43, 17, dma_display->color565(255, 255, 255));
//   // drawText7x8("L", 43 + geser, 17, dma_display->color565(255, 255, 255));
// }

void drawText10x14(int startX, int startY, const char *text)
{
    int x = startX;
    int geser = 0;
    while (*text)
    {
        const int *fontData = nullptr;
        if (*text == ' ')
        {
            
        }
        else if (*text >= 'A' && *text <= 'Z')
        {
            fontData = font_11x13[*text - 'A'];
            geser = 0;
        }

        else if (*text >= '0' && *text <= '9')
        {
            fontData = font_11x13[*text - '0' + 26];
            geser = 2;
        }

        if (fontData)
        {
            printCharacter(x - geser, startY, fontData);
        }

        x += 11; // Pindah ke karakter berikutnya (dengan jarak 16 pixel antar karakter)
        text++;
    }
}

void printCharToMatrix(int x, int y, char c, int fontSize)
{
  if (c == ' ')
  {

    errdrawPixel(x, y, dma_display->color565(000, 000, 000));
    errdrawPixel(x + 1, y, dma_display->color565(000, 000, 000));
    errdrawPixel(x + 2, y, dma_display->color565(000, 000, 000));
    return;
  }
  if (c == ':')
  {

    errdrawPixel(x + 2, y + 1, dma_display->color565(255, 000, 000));
    errdrawPixel(x + 3, y + 1, dma_display->color565(255, 000, 000));
    errdrawPixel(x + 2, y + 2, dma_display->color565(255, 000, 000));
    errdrawPixel(x + 3, y + 2, dma_display->color565(255, 000, 000));
    // errdrawPixel(x, y , dma_display->color565(255,000,000));
    errdrawPixel(x + 2, y + 10, dma_display->color565(255, 000, 000));
    errdrawPixel(x + 3, y + 10, dma_display->color565(255, 000, 000));
    errdrawPixel(x + 2, y + 11, dma_display->color565(255, 000, 000));
    errdrawPixel(x + 3, y + 11, dma_display->color565(255, 000, 000));
    return;
  }

  int index;
  if (c >= 'A' && c <= 'Z')
  {
    index = c - 'A'; // Indeks untuk huruf A-Z
  }
  else if (c >= '0' && c <= '9')
  {
    index = c - '0' + 26; // Indeks untuk angka 0-9
  }
  else
  {
    // return; // Karakter tidak valid
  }
  // Tampilkan karakter dalam bentuk 5x7 LED matrix dengan skala
  for (int i = 0; i < 5; i++)
  {
    unsigned char byte = font5x7[index][i];
    for (int j = 0; j < 7; j++)
    {
      if (byte & (1 << j))
      { // Jika bit di posisi 'j' adalah 1
        // Skala memperbesar setiap titik LED
        for (int dx = 0; dx < fontSize; dx++)
        {
          for (int dy = 0; dy < fontSize; dy++)
          {
            int setX = x + i * fontSize + dx;
            int setY = y + j * fontSize + dy;
            errdrawPixel(setX, setY, dma_display->color565(255, 000, 000));
          }
        }
      }
      else
      {
        for (int dx = 0; dx < fontSize; dx++)
        {
          for (int dy = 0; dy < fontSize; dy++)
          {
            int setX = x + i * fontSize + dx;
            int setY = y + j * fontSize + dy;
            errdrawPixel(setX, setY, dma_display->color565(000, 000, 000));
          }
        }
      }
    }
  }
}

void displayText(int x, int y, const char *text, int scale)
{
  int offset = 0;
  while (*text)
  {
    printCharToMatrix(x + offset, y, *text, scale);
    offset += (5 * scale) + 4; // Tambahkan spasi antar huruf
    text++;
  }
}

void textsttc()
{

  // displayText(4, 8, "MATERIAL:", 2);
  // drawText10x14(4, 8, "MATERIAL:");
}